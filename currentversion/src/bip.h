//FrogProlog generated: Wed Jul 19 12:00:01 2006

//Generated Code:
#ifndef __bip_h
#define __bip_h
#include "prologenvironment.h"
#include "prolognames.h"


namespace PrologSystem {
extern pl_Name PLN_plr__backslash_plus;
extern pl_Name PLN_plr_not;
extern pl_Name PLN_plr__equal;
extern pl_Name PLN_plr__less;
extern pl_Name PLN_plr__equal_dot_dot;
extern pl_Name PLN_plr__equal_addsymbol_equal;
extern pl_Name PLN_plr__equal_colon_equal;
extern pl_Name PLN_plr__equal_less;
extern pl_Name PLN_plr__equal_equal;
extern pl_Name PLN_plr__equal_backslash_equal;
extern pl_Name PLN_plr__greater;
extern pl_Name PLN_plr__greater_equal;
extern pl_Name PLN_plr__addsymbol_less;
extern pl_Name PLN_plr__addsymbol_equal_less;
extern pl_Name PLN_plr__addsymbol_greater;
extern pl_Name PLN_plr__addsymbol_greater_equal;
extern pl_Name PLN_plr__backslash_equal;
extern pl_Name PLN_plr__backslash_equal_equal;
extern pl_Name PLN_plr_is;
extern pl_Name PLN_plr__colon;
extern pl_Name PLN_plr__plus;
extern pl_Name PLN_plr__minus;
extern pl_Name PLN_plr__divide_backslash;
extern pl_Name PLN_plr__backslash_divide;
extern pl_Name PLN_plr_xor;
extern pl_Name PLN_plr__question;
extern pl_Name PLN_plr__backslash;
extern pl_Name PLN_plr__multiply;
extern pl_Name PLN_plr__divide;
extern pl_Name PLN_plr__divide_divide;
extern pl_Name PLN_plr_rdiv;
extern pl_Name PLN_plr__less_less;
extern pl_Name PLN_plr__greater_greater;
extern pl_Name PLN_plr_mod;
extern pl_Name PLN_plr_rem;
extern pl_Name PLN_plr__multiply_multiply;
extern pl_Name PLN_plr__potence;
extern pl_Name PLN_plr__cut;
extern pl_Name PLN_plr_fail;
extern pl_Name PLN_plr_false;
extern pl_Name PLN_plr_true;
extern pl_Name PLN_plr_assert;
extern pl_Name PLN_plr_A0;
extern pl_Name PLN_plr_asserta;
extern pl_Name PLN_plr_assertz;
extern pl_Name PLN_plr_A1;
extern pl_Name PLN_plr_retract;
extern pl_Name PLN_plr_retractall;
extern pl_Name PLN_plr_abolish;
extern pl_Name PLN_plr_bye;
extern pl_Name PLN_plr_halt;
extern pl_Name PLN_plr_repeat;
extern pl_Name PLN_plr_var;
extern pl_Name PLN_plr_nonvar;
extern pl_Name PLN_plr_ground;
extern pl_Name PLN_plr_atom;
extern pl_Name PLN_plr_float;
extern pl_Name PLN_plr_integer;
extern pl_Name PLN_plr_number;
extern pl_Name PLN_plr_atomic;
extern pl_Name PLN_plr_simple;
extern pl_Name PLN_plr_compound;
extern pl_Name PLN_plr_write;
extern pl_Name PLN_plr_writeq;
extern pl_Name PLN_plr_nl;
extern pl_Name PLN_plr_put;
extern pl_Name PLN_plr_tab;
extern pl_Name PLN_plr_tell;
extern pl_Name PLN_plr_telling;
extern pl_Name PLN_plr_told;
extern pl_Name PLN_plr_read;
extern pl_Name PLN_plr_see;
extern pl_Name PLN_plr_seeing;
extern pl_Name PLN_plr_seen;
extern pl_Name PLN_plr_at_end_of_stream;
extern pl_Name PLN_plr_put_byte;
extern pl_Name PLN_plr_put_char;
extern pl_Name PLN_plr_put_code;
extern pl_Name PLN_plr_flush_output;
extern pl_Name PLN_plr_get_byte;
extern pl_Name PLN_plr_get_code;
extern pl_Name PLN_plr_get_char;
extern pl_Name PLN_plr_get;
extern pl_Name PLN_plr_peek_byte;
extern pl_Name PLN_plr_peek_code;
extern pl_Name PLN_plr_peek_char;
extern pl_Name PLN_plr_skip;
extern pl_Name PLN_plr_functor;
extern pl_Name PLN_plr_A2;
extern pl_Name PLN_plr_arg;
extern pl_Name PLN_plr_char_type;
extern pl_Name PLN_plr_atom_codes;
extern pl_Name PLN_plr_atom_chars;
extern pl_Name PLN_plr_char_code;
extern pl_Name PLN_plr_number_chars;
extern pl_Name PLN_plr_number_codes;
extern pl_Name PLN_plr_atom_number;
extern pl_Name PLN_plr_name;
extern pl_Name PLN_plr_term_to_atom;
extern pl_Name PLN_plr_atom_to_term;
extern pl_Name PLN_plr_atom_concat;
extern pl_Name PLN_plr_concat_atom;
extern pl_Name PLN_plr_atom_length;
extern pl_Name PLN_plr_atom_prefix;
extern pl_Name PLN_plr_sub_atom;
extern pl_Name PLN_plr_A3;
extern pl_Name PLN_plr_A4;
extern pl_Name PLN_plr_dynamic;
extern pl_Name PLN_plr__dollarinstance;
extern pl_Name PLN_plr_findall;
extern pl_Name PLN_plr_X;
extern pl_Name PLN_plr_Goal;
extern pl_Name PLN_plr_Xs;
extern pl_Name PLN_plr__dollarmark;
extern pl_Name PLN_plr_X1;
extern pl_Name PLN_plr_intern_reap_;
extern pl_Name PLN_plr_addVar;
extern pl_Name PLN_plr__bracket_bracketend;
extern pl_Name PLN_plr_REST;
extern pl_Name PLN_plr_Ys;
extern pl_Name PLN_plr__dot;
extern pl_Name PLN_plr_catch;
extern pl_Name PLN_plr_ProtectedGoal;
extern pl_Name PLN_plr_Pattern;
extern pl_Name PLN_plr_Handler;
extern pl_Name PLN_plr_on_exception;
extern pl_Name PLN_plr_throw;
extern pl_Name PLN_plr_Exception;
extern pl_Name PLN_plr_raise_exception;
extern pl_Name PLN_plr_member;
extern pl_Name PLN_plr_Y;
extern pl_Name PLN_plr_append;
extern pl_Name PLN_plr_Zs;
extern pl_Name PLN_plr_reverse;
extern pl_Name PLN_plr_reversein;
extern pl_Name PLN_plr_Acc;

void pl_initModule_bip();
extern pl_PredicateCollection pl_dyn_plr__dollarinstance_1;
bool plr__dollarinstance(pl_PrologVar & A0);
bool plr_findall(pl_PrologVar & plr_A0, pl_PrologVar & plr_A1, pl_PrologVar & plr_A2);
bool plr_findall_Choise_0(pl_PrologVar & plr_X, pl_PrologVar & plr_Goal, pl_PrologVar & plr_Xs);
bool plr_findall_Choise_1(pl_PrologVar & plr_X, pl_PrologVar & plr_Goal, pl_PrologVar & plr_Xs);
bool plr_intern_reap_(pl_PrologVar & plr_A0, pl_PrologVar & plr_A1);
bool plr_intern_reap__Choise_0(pl_PrologVar & plr_X, pl_PrologVar & plr_REST, pl_PrologVar & plr_Ys);
bool plr_catch(pl_PrologVar & plr_ProtectedGoal, pl_PrologVar & plr_Pattern, pl_PrologVar & plr_Handler);
bool plr_on_exception(pl_PrologVar & plr_Pattern, pl_PrologVar & plr_ProtectedGoal, pl_PrologVar & plr_Handler);
bool plr_throw(pl_PrologVar & plr_Exception);
bool plr_raise_exception(pl_PrologVar & plr_Exception);
bool plr_member(pl_PrologVar & plr_A0, pl_PrologVar & plr_A1);
bool plr_member_Choise_1(pl_PrologVar & plr_X, pl_PrologVar & plr_Y, pl_PrologVar & plr_Ys);
bool plr_append(pl_PrologVar & plr_A0, pl_PrologVar & plr_A1, pl_PrologVar & plr_A2);
bool plr_append_Choise_1(pl_PrologVar & plr_X, pl_PrologVar & plr_Xs, pl_PrologVar & plr_Ys, pl_PrologVar & plr_Zs);
bool plr_reverse(pl_PrologVar & plr_Xs, pl_PrologVar & plr_Ys);
bool plr_reversein(pl_PrologVar & plr_A0, pl_PrologVar & plr_A1, pl_PrologVar & plr_A2);
bool plr_reversein_Choise_0(pl_PrologVar & plr_X, pl_PrologVar & plr_Xs, pl_PrologVar & plr_Acc, pl_PrologVar & plr_Ys);

};

#endif
